{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":3103,"byte_end":3104,"line_start":82,"line_end":82,"column_start":6,"column_end":7,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> Field<T, R> {","highlight_start":6,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:82:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> Field<T, R> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":3116,"byte_end":3117,"line_start":82,"line_end":82,"column_start":19,"column_end":20,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> Field<T, R> {","highlight_start":19,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:82:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> Field<T, R> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6548,"byte_end":6573,"line_start":189,"line_end":189,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(u8);","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6574,"byte_end":6600,"line_start":190,"line_end":190,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(u16);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6601,"byte_end":6627,"line_start":191,"line_end":191,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(u32);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6628,"byte_end":6654,"line_start":192,"line_end":192,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(u64);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6655,"byte_end":6682,"line_start":193,"line_end":193,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(u128);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5815,"byte_end":5816,"line_start":169,"line_end":169,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":6683,"byte_end":6711,"line_start":194,"line_end":194,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"FieldValue_impl_for!(usize);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"FieldValue_impl_for!","def_site_span":{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs","byte_start":5529,"byte_end":6546,"line_start":164,"line_end":187,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! FieldValue_impl_for {","highlight_start":1,"highlight_end":35},{"text":"    ($type:ty) => {","highlight_start":1,"highlight_end":20},{"text":"        // Necessary to split the implementation of new() out because the bitwise","highlight_start":1,"highlight_end":82},{"text":"        // math isn't treated as const when the type is generic.","highlight_start":1,"highlight_end":65},{"text":"        // Tracking issue: https://github.com/rust-lang/rfcs/pull/2632","highlight_start":1,"highlight_end":71},{"text":"        impl<R: RegisterLongName> FieldValue<$type, R> {","highlight_start":1,"highlight_end":57},{"text":"            pub const fn new(mask: $type, shift: usize, value: $type) -> Self {","highlight_start":1,"highlight_end":80},{"text":"                FieldValue {","highlight_start":1,"highlight_end":29},{"text":"                    mask: mask << shift,","highlight_start":1,"highlight_end":41},{"text":"                    value: (value & mask) << shift,","highlight_start":1,"highlight_end":52},{"text":"                    associated_register: PhantomData,","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Necessary to split the implementation of From<> out because of the orphan rule","highlight_start":1,"highlight_end":90},{"text":"        // for foreign trait implementation (see [E0210](https://doc.rust-lang.org/error-index.html#E0210)).","highlight_start":1,"highlight_end":109},{"text":"        impl<R: RegisterLongName> From<FieldValue<$type, R>> for $type {","highlight_start":1,"highlight_end":73},{"text":"            fn from(val: FieldValue<$type, R>) -> $type {","highlight_start":1,"highlight_end":58},{"text":"                val.value","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/fields.rs:169:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<R: RegisterLongName> FieldValue<$type, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mFieldValue_impl_for!(usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/registers.rs","byte_start":5267,"byte_end":5268,"line_start":156,"line_end":156,"column_start":6,"column_end":7,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> InMemoryRegister<T, R> {","highlight_start":6,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/registers.rs:156:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> InMemoryRegister<T, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/registers.rs","byte_start":5280,"byte_end":5281,"line_start":156,"line_end":156,"column_start":19,"column_end":20,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> InMemoryRegister<T, R> {","highlight_start":19,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/registers.rs:156:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> InMemoryRegister<T, R> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/local_register.rs","byte_start":1587,"byte_end":1588,"line_start":36,"line_end":36,"column_start":6,"column_end":7,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> LocalRegisterCopy<T, R> {","highlight_start":6,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/local_register.rs:36:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> LocalRegisterCopy<T, R> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"trait bounds other than `Sized` on const fn parameters are unstable","code":{"code":"E0723","explanation":"An unstable feature in `const` contexts was used.\n\nErroneous code example:\n\n```compile_fail,E0723\nconst fn foo<T: Copy>(_: T) { // error!\n   // ...\n}\n```\n\nTo enable this feature on a nightly version of rustc, add the `const_fn`\nfeature flag:\n\n```\n#![feature(const_fn)]\n\nconst fn foo<T: Copy>(_: T) { // ok!\n   // ...\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/local_register.rs","byte_start":1600,"byte_end":1601,"line_start":36,"line_end":36,"column_start":19,"column_end":20,"is_primary":true,"text":[{"text":"impl<T: UIntLike, R: RegisterLongName> LocalRegisterCopy<T, R> {","highlight_start":19,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(const_fn)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0723]\u001b[0m\u001b[0m\u001b[1m: trait bounds other than `Sized` on const fn parameters are unstable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mago/.cargo/registry/src/github.com-1ecc6299db9ec823/tock-registers-0.7.0/src/local_register.rs:36:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: UIntLike, R: RegisterLongName> LocalRegisterCopy<T, R> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_fn)]` to the crate attributes to enable\u001b[0m\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0723`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0723`.\u001b[0m\n"}
